                        +------------------+
                        |      CS 124      |
                        | PROJECT 1: SHELL |
                        |  DESIGN DOCUMENT |
                        +------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yichi Zhang <yzzhang@caltech.edu>
Ying-Yu Ho <yingyu@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  0

>> What is the Git repository and commit hash for your submission?

   Repository URL:  /cs/courses/cs124/teams/pintos-hkz
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Undocumented feature: An empty command is treated as cat (for example the
command "< in.txt > out.txt" is basically cp in.txt out.txt, except that
permissions are set to 644). This is roughly what zsh does (except it pipes to
more if output isn't redirected).

Undocumented feature: All redirections are parsed, but only the first one
is actually done, and only for the last part of the command (for example
"ls > a >> b" will just do "ls > a") This is an attempt to allow the shell
to at least have the same syntax as other shells, even if it doesn't do
the same thing.

The first extra credit (appending to file) is implemented.

This has no memory leaks on Lubuntu 13.10; I can't say the same for OpenSUSE.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

linux.die.net for POSIX references

			   COMMAND SHELL
			   =============

---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

The shell is internally represented as three node_t's. Each of them holds
the respective file ("a", "b", and "c" respectively) as well as the array
of arguments ({"a", "arg1", "arg2", NULL}, {"b", "arg1", NULL}, and {"c", 
"arg1", "arg2", "arg3", NULL} respectively). Each of the node_t's is
constructed by parsing up to an unescaped pipe or null character.

The execution is handled by creating a pipe before forking each child; each
child then closes the side that they are not using, and uses dup2() to redirect
its input or output appropriately. The shell process then cleans up file
descriptors that are no longer necessary before proceeding to the next child.

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

The redirections are handled during the construction of the nodes (the < and
> are never parsed into the argument list). The reason for this is to
avoid possible ambiguity with regards to quoted or escaped characters.
When the parser finds an unescaped, unquoted < or >, it reads the next token
and stores that in the ins or outs arrays of the node (or gives a parse error
if the token is empty). That array is then used to redirect input or output.

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

The redirection is set up in the child process by looking at the node_t (
specifically the arrays ins and outs). ins[0] is "inp.txt", so the child
process open()s it with the appropriate options and uses dup2() to use it
as standard input. outs[0] is "out.txt", so the child process open()s it with
the appropriate options and uses dup2() to use it as standard output.

This shell only allows redirection of input on the first command and of output
on the last command (it will parse but not process other redirection)

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

The command shell iterates through the nodes, creates a pipe (cleaning up
the previous one), and forks a child process for each. Each process then sets
its input and output streams appropriately, closing the side of the pipe that
it's not using: the first process sets its stdout to the write side of the pipe
that it's given; the second process sets its stdin to the read side of that
pipe and its stdout to the write side of a new pipe; the third process sets
its stdin to the read side of that new pipe.

The open pipes are cleaned up between each fork() to avoid having too many
file descriptors open at once.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

The command shell process keeps track of the number of commands, so it simply
calls wait() that many times (ignoring all return values).

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

The redirections are set up during the parsing (in the ins and outs arrays).
The first child checks whether ins is empty; since ins[0] is "inp.txt" it
open()s that file and redirects it to standard input. The last child checks
whether outs is empty; since outs[0] is "out.txt" it open()s that file and
redirects standard output to it.

---- RATIONALE ----

>> A?: Why do the chdir and exit commands have to be implemented as
>> built-in functions, rather than external programs?

Running chdir() or exit() in a forked process will not affect the parent
process.

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

                         SURVEY QUESTIONS
                         ================
Setting up redirection during parsing allows us to avoid ambiguity between
possible input strings (for example ls > > and ls > \>, the latter of which
is a valid command) while still allowing us to strip backslashes and double
quotes to allow arguments to be passed to execvp().

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
