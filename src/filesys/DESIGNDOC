                     +-------------------------+
                     |          CS 124         |
                     | PROJECT 6: FILE SYSTEMS |
                     |     DESIGN DOCUMENT     |
                     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yichi Zhang     <yzzhang@caltech.edu>
Ying-Yu Ho      <yingyu@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 0

>> What is the Git repository and commit hash for your submission?

   Repository URL:  login.cms.caltech.edu:/cs/courses/cs124/teams/pintos-hkz
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

A lot of system calls should really have special treatment for directories,
especially because I'm abusing some of the variables. (read(), for example,
will have unexpected results in combination with readdir(), because pos
is set to the dir's pos rather than the file's for readdir())

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

                     INDEXED AND EXTENSIBLE FILES
                     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk {
  uint32_t sectors[126]; // array of sectors
    off_t length;   // file size in bytes
    unsigned magic; // used to identify directories
};

struct inode {
  struct lock extend_lock; // lock used to synchronize extends
}

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

126 * 128 * 512B = 8257536 bytes

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

Via a lock in the in-memory inode.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

The length of the file is not updated until the write is finished; the
reader will not see any of what B writes until then.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

All reading and writing is done one sector at a time and do not block
each other.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

It is a multilevel index; the combination was chosen for simplicity of
calculation and indexing.

                            SUBDIRECTORIES
                            ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
  struct dir *curdir; // current directory
}

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

A struct cur * keeps track of the directory during the traversal, and
strtok_r() is used to get the next part of the path. The traversal
of an absolute path starts at /, while the traversal of a relative
path starts at the process's current directory (however, this
distinction is made by the functions that do the traversal).

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

They are synchronized using the underlying inode's extension lock.
(We can't use a lock in the struct dir, because a new one will
be made every time you reopen it)

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

It is allowed; the relevant file system operations check whether
the underlying inode has been removed (dir_open() for example will
return null, and most of the other operations call reopen() on
the provided struct dir* so they will get null pointers).

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

Representing it as a pointer makes it take up less space and makes it
easier to update.

                             BUFFER CACHE
                             ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Stores data in a sector */
struct block {
  uint8_t byte[BLOCK_SECTOR_SIZE];
};

enum cache_flags {
  CACHE_PRESENT =   0x01, /* Has data */
  CACHE_ACCESS =    0x02, /* Accessed recently */
  CACHE_DIRTY =     0x04, /* Dirty */
  CACHE_EMPTYLIST = 0x10, /* In the empty list */
  CACHE_CLOCKLIST = 0x20  /* Evictable */
};

/* Parameter for mimicking RW lock with semaphore */
#define CACHE_SEMA_NUM 16

struct cache_entry {
  block_sector_t sector;  /* Sector index */
  struct block *data;     /* Pointer to content */

  int32_t prev;           /* Previous one in the list */
  int32_t next;           /* Next one in the list */

  uint32_t flags;

  struct semaphore sema;  /* Read and write semaphores */
  struct hash_elem elem;
};

/* Start of cache descriptor */
static struct cache_entry *cache_header;

/* Start of cache storage */
static struct block *cache_data;

/* Candidate cache slot to evict */
static int32_t clock_hand;

/* Unused cache slots */
static int32_t empty_list;

/* Protects cache data structure */
static struct lock cache_lock;

/* Lookup cache descriptor from sector index */
static struct hash cache_table;

/* Store the read-ahead sector */
static block_sector_t read_ahead_sector;
/* Semaphores for passing read_ahead_sector to background service */
static struct semaphore read_ahead_sema_r;
static struct semaphore read_ahead_sema_w;

/* Indicates whether the cache system is running */
static bool running;

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We implemented Not Recently Used policy.

>> C3: Describe your implementation of write-behind.

We run a background thread that sleep for 1 tick and then scan through 
all dirty cache slots. For each dirty cache slot, the routine tries to 
obtain exclusive control (16 semaphores, see C5) before writing the data 
back to the disk. If exclusive control is not available immediately due 
to other process' reading or writing, write-back for that cache slot is
skipped. The above operations are repeated until the cache system is
shut down.

>> C4: Describe your implementation of read-ahead.

A function sets up the sector number to be read and ups a semaphore to 
notify a background thread of the request. The background thread downs 
the semaphore and then read the data into cache. At most one sector number
can be requested for read-ahead before the background thread has opportunity
to run and take away that sector number; otherwise the second and later 
requests are ignored.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

Each cache slot has a semaphore initialized to a positive number (16).
For reading or writing, the semaphore is down by 1, the operation is 
performed, and then the semaphore is up by 1. For eviction, the semaphore
is down by 16 (sema_down 16 times) before continuing. Therefore, many (16)
reading and writing operations can be performed on the same cache slot 
in parallel. When the cache slot is about to be evicted, the capacity of
parallel reading/writing is gradually reduced to 0, at which point the 
eviction routine has the needed exclusive control to proceed.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

See C5.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Reading many small chunks from the same sector would benefit from caching.
Writing many small chunks to the same sector would benefit from write-behind.
Reading a file sequentially with heavy computation in between would benefit 
from read-ahead.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
