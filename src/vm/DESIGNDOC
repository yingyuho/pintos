                    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yichi Zhang     <yzzhang@caltech.edu>
Ying-Yu Ho      <yingyu@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 3

>> What is the Git repository and commit hash for your submission?

   Repository URL: login.cms.caltech.edu:/cs/courses/cs124/teams/pintos-hkz
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/osfmk/mach/vm_prot.h

http://lxr.free-electrons.com/source/include/linux/mm.h?a=avr32#L210

                        PAGE TABLE MANAGEMENT
                        =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

........ threads/thread.h ........

struct thread {
......
    void *esp;                          /* Holds ESP for PF handler */
    struct mm_struct mm;                /* Memory descriptor */
......
};

........ vm/frame.h ........

/* Flags for rame table entry */ 
enum frame_flags
{
    PG_LOCKED =     0x01,   /* Should not be evicted */
    PG_DIRTY =      0x02,   /* Data is modified */
    
    PG_CODE =       0x10,   /* Code segment */
    PG_DATA =       0x20,   /* Data segment */
    PG_MMAP =       0x40    /* Mapped file segment */
};

/* Frame table entry */ 
struct frame_entry
{
    uint32_t *pagedir;          /* Process page directory */
    void *upage;                /* User page address */

    struct vm_area_struct *vma; /* Parent memory area descriptor */

    size_t prev;                /* Circular queue structure */
    size_t next;

    uint32_t flags;
};

........ vm/frame.c ........

/* An array holding all struct frame_entry */
static struct frame_entry *ftable;

/* The next candidate frame to be evicted */
static int32_t clock_hand;
#define CLOCK_HAND_NONE -1

/* realloc ftable when table_size > table_capacity */
static size_t table_capacity;
static size_t table_size;

/* A lock protecting ftable */
static struct lock table_lock;

........ vm/page.h ........

/* Flags for memory area descriptor
 *
 * Reference:
 * http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/osfmk/mach/vm_prot.h
 */
enum vm_flag_t
{
    VM_READ =           0x0001,     /* Permissions */
    VM_WRITE =          0x0002,
    VM_EXEC =           0x0004,

    VM_SHARED =         0x0010,     /* Shared by processes */
    
    VM_EXECUTABLE =     0x0100,     /* Maps an executable file. */
    VM_MMAP =           0x0200      /* Memory mapped file */
};

#define VM_PROT_DEFAULT (VM_PROT_READ | VM_PROT_WRITE)
#define VM_PROT_ALL (VM_PROT_READ | VM_PROT_WRITE)

/* Memory descriptor */
struct mm_struct
{
    uint32_t *pagedir;
    struct vm_area_struct *mmap;        /* The first memory segment */
    struct vm_area_struct *vma_stack;   /* The stack segment */
    struct lock mmap_lock_w;            /* Lock for modifying list structure */
};

/* Shadow page table entry owned by memory area descriptor */
struct vm_page_struct
{
    void *upage;            /* User page number (hash key) */
    uint32_t pte;           /* Page table entry */
    uint32_t swap;          /* Swap slot */
    struct hash_elem elem;
};

/* Memory area descriptor */
struct vm_area_struct
{
    struct mm_struct *vm_mm;        /* Parent memory descriptor */

    uint32_t *pagedir;              /* Process page directory */
        
    uint8_t *vm_start;              /* Start and end addresses */
    uint8_t *vm_end;
    struct vm_area_struct *next;    /* Next segment */

    uint32_t vm_flags;

    int mmap_id;                    /* ID of memory mapped file */
    bool dirty;

    struct hash vm_page_table;      /* Shadow page table */

    struct vm_operations_struct *vm_ops;    /* Some function pointers */

    struct file *vm_file;           /* Mapped file */
    off_t vm_file_ofs;              /* File offset at vm_start */
    uint32_t vm_file_read_bytes;
    uint32_t vm_file_zero_bytes;
};

/* Lightweight struct for a virtual memory segment */
struct vm_interval {
    uint32_t *pagedir;
    uint8_t *vm_start;
    uint8_t *vm_end;
};

/* Data passed around PF handlers 
 *
 * Reference:
 * http://lxr.free-electrons.com/source/include/linux/mm.h?a=avr32#L210
 */
struct vm_fault {
    off_t page_ofs;         /* Page offset in the memory segment */
    void *fault_addr;       /* Faulting address */
    bool user;              /* From user or kernel */
};

struct vm_operations_struct {
    /* Invoked by page fault handler when a process tries to access
     * a valid address but the page is not present */
    int32_t (*absent)(struct vm_area_struct *vma, struct vm_fault *vmf);
};

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We retrieve "struct mm_struct", and then scan through its list of 
"struct vm_area_struct" that are sorted in ascending order of virtual 
addresses to determine which segment is the page in. Then we look up the 
frame or swap slot from a hash table maintained by "struct vm_area_struct".

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Only the user virtual address is used, and we didn't have enough tokens
to implement sharing.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The circular queue of frames is locked when it is running an algorithm
to determine which frame to evict. The candidate frame to evict is pull 
out of the queue before the queue is unlocked.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Using a linked list makes it somewhat easier to allow an arbitrary number
of vm areas. Keeping the list of virtual-to-physical mappings per process
allows us to scan through fewer entries, although it will incur more memory
cost. Hash tables provide us with quick look-up of physical address or
swap slot with reasonable memory cost.

                       PAGING TO AND FROM DISK
                       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

........ vm/swap.h ........

static struct block *swap_block;        /* Point to swap disk */
static size_t swap_size;                /* Number of slots */

static struct bitmap *swap_bitmap;      /* Record hich slots have data */
static struct lock swap_bitmap_lock;    /* Lock for accessing the above */

/* A lock for each swap slot. This wastes lots of kernel memory. */
static struct lock *swap_slot_locks;

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

The faulting address must be

1. Greater than PHYS_BASE minus 8 MB (max stack size), 
2. Not less than ESP minus 32 bytes (what PUSHA takes), and
3. Less than PHYS_BASE.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Frame table: A single lock for any access to the frame table. 

Swap table: each swap slot has a lock which must be acquired before any 
reading or writing operation, and released right after I/O operation.
Apparently we can pass all test cases without these memory-consuming locks 
because block devices have internal synchronization, but we still use them
as there are other important operations before I/O occurs.

A process cannot access two swap table simultaneously and frame table does 
not interact with swap table directly so there is no possible deadlock.
Decoupling frame table and swap table is tricky, however. 

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

The order of events during swapping is

(Eviction phase)

1.  Get a swap slot and mark it as having data (atomic with a lock).
2.  Lock the swap slot.
3.  Set the shadow page table to reflect that the page is not present and 
    to tell the process where (in disk or swap) the page can be found.
4.  Clear the page table entry so that the affect process would fault
    when it tries to access this page. It will not be able to read the swap
    slot because of the lock (no such limitation if no swap is used).
5.  Pull frame out of the circular queue.
5.  Write data in frame to swap space.
6.  Release the lock of swap slot.

(Reading phase, easier because it is mostly about the current process)

7.  Set the shadow page table to tell the current process of a new frame.
8.  Find out where to read data (swap, disk, or just zero).
9.  Lock the swap slot.
10. Read data from swap to frame.
11. Unlock the swap slot.
12. Mark the swap slot as not in use.
13. Install frame to the page table.
14. Push frame into the circular queue.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

The newly acquired frame is not inserted into the circular list of queue
until it is filled with data and the relevant information is initialized.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults to bring-in pages, and pin the corresponding frames
in page fault handler. Present pages are also pinned. 
Since we also use page faults to check validity of user pointers in the 
last project, no much new design is needed to handle attempted access 
to invalid virtual addresses.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We use a single lock for the frame table because its underlying circular
queue is fragile. Also, most usage of the frame table involves quickly
traversing all entries. Examples include picking a frame to evict and 
removing entries when a process exits.

We give each swap slot a lock because it has an array data structure
and I/O operations are too slow to afford only a single lock.

                         MEMORY MAPPED FILES
                         ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static int mmap (int fd, void *addr) {

  static int id = 2;    /* ID of mapped file */
......
};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

A memory mapped file is simply added to the supplemental page table
as if it were a part of memory swapped to file (with some minor
differences such as zeroed bytes at the end), which allows the page
fault and eviction code to be reused for the most part.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

For each process, "struct mm_struct mm" contains a list of memory
region descriptors "struct vm_area_struct". When a new VMA is inserted,
we first find to insertion point that preserve the ascending order of
start address. Then we can easily determine if the new VMA is overlapping
with existing ones. The insertion fails if it is the case.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

The eviction part is shared with other kind of segments. The paging-in
part, however, has many codes copied and modified from those of 
executable segments because we want to keep the MMAP codes in syscall.c
to reduce entanglement between source files.

There are a couple of important divergences; while we can think of a mmaped
file as a part of memory swapped to the file for most purposes, we need to
write the pages back (if dirty) on unmap or process exit and also to
be able to identify virtual memory areas with their mmap identifiers.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

The demand of proper synchronization was insane.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

I find it impossible to put a commit hash for a submission with the
finished design document, which includes the same commit hash.
