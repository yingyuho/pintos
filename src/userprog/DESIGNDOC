                     +--------------------------+
       	       	     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yichi Zhang <yzzhang@caltech.edu>
Ying-Yu Ho <yingyu@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 1

>> What is the Git repository and commit hash for your submission?

   Repository URL: /cs/courses/cs124/teams/pintos-hkz
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Understanding the Linux Kernel, 3rd ed.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The whole cmdline is pushed to the stack. A loop counts the number
of arguments in order to reserve spaces for argv[0], ..., argv[argc].
Then another loop calls strtok_r() to tokenize (replaces ' ' by '\0') 
the in-stack copy of cmdline while filling up argv[i]. Finally, argv,
argc, and 0 are pushed to the stack.

Overflow is avoided by only parsing up to PGSIZE/2 bytes.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() uses global data and is therefore unsafe in kernels (two threads
can try to parse different strings, for example)

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The Unix-like approach allows spaces in filenames and arguments, as well
as allowing the shell to expand symbols such as ` and *.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

New struct: 
struct file_node {
  int fd; // file descriptor for this node
  struct file *f; // pointer to file object
}; // holds a file descriptor and a pointer to a file object

Global variable:
  struct lock fs_lock; // synchronizes filesystem access

Static variable:
  static int next_fd = 10; // used to assign new file descriptors

In struct thread:
  struct file_node *files[2]; // lists of open files
  int nfiles; // number of open files

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each thread has an array of struct file_nodes (which is dynamically allocated)
holding all open files and associated file descriptors.

File descriptors are not necessarily unique in the OS, but are unique
within a single process. It would be fairly easy to make them unique in
the OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

struct thread_ashes {
    tid_t tid;
    bool has_been_waited;
    bool load_success;
    int32_t exit_status;
    struct semaphore sema;
    struct thread *thread;
    struct list_elem elem;
};

Each thread keeps a list of struct thread_ashes, each of which stores
minimal information of a child thread. 
thread_ashes.sema is intialized to 0, thread_ashes.exit_status to -1. 
When a child thread terminates, it calls sema_up() on thread_ashes.sema
When a parent thread calls wait(), it calls sema_up() on thread_ashes.sema
and then retrieves thread_ashes.exit_status.
When exit() is called, the status is passed to thread_ashes.exit_status
to overwrite the default value -1.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

struct thread has a new field, semaphore load_done and 
struct thread_ashes has bool load_success. 
load_success is set when the new executable is loaded or fails to be 
loaded. Then sema_up() is called on load_done.

exec() calls sema_down() on load_done and then get load_success.
If load_success == true, it returns the tid immediately; otherwise
it calls process_wait(tid) to wait for the death of failed process
and then returns -1;

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

A list of struct thread_ashes is managed by the parent thread 
and it is not freed right after the death of child thread. 
Synchronization is explained in B5. struct thread_ashes is freed when 
the parent thread terminates or process_wait() is called on its tid,
i.e., when we are sure that process_wait(tid) is no longer meaningful.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We kept the identity mapping to finish this assignment sooner.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

