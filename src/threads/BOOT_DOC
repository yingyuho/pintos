			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yichi Zhang <yzzhang@caltech.edu>
Ying-Yu Ho <yingyu@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  
0
>> What is the Git repository and commit hash for your submission?

   Repository URL: /cs/courses/cs124/teams/pintos-hkz
   commit 

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

There are many, many magic constants in the code. I blame Intel.

I have assumed that the character set is ASCII. If you can find an EBCDIC
x86 virtual machine to run this on, well, good for you. The relevant
numbers to change for a different character set are the 0x1f on line 105
(it's equal to 0x80 - 'a'), the 53 on line 107 (it's equal to 5 + '0')
and the $10 on line 110 (it's equal to the newline character).

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Wikipedia and Wikibooks, specifically:

en.wikibooks.org/wiki/X86_Assembly
en.wikipedia.org/wiki/INT_13H


			     BOOTLOADER
			     ==========

---- DATA STRUCTURES ----

>> A1: In the order that they are used, specify the areas of memory that
>> your bootloader code uses (both starting address and size) during the
>> bootstrap process.  Briefly describe the purpose of each memory area.
>> Note that you do not have to enumerate the structure of sector data or
>> anything like that; simply state the general purpose of the various
>> memory areas used by your bootload code.

16 bytes starting at 0x7e00: the struct used to load from disk
This struct is actually used twice (to load the MBR sector and to load the
kernel), with the data being changed in between.

512 bytes starting at 0x7e10: Used to load the MBR into

Up to 512KiB starting at 0x20000: Used to load the kernel into


---- ALGORITHMS ----

>> A2: Write a pseudocode description (e.g. at the level of Python and
>> English phrases) of the sequence of operations that your bootloader
>> performs when searching for, and then loading, the Pintos kernel.

for drive in drives:
     Load MBR of drive
     if (load failed)
     	  break
     if (drive is not bootable)
     	  continue
     for partition in partitions:
     	  if (partition is bootable and Pintos)
	       Check partition size
	       Load first 512KiB, or entire partition if it's smaller
	       Run the kernel
Tell the BIOS that we can't find an operating system

>> A3: Did you have any difficulties making the entire bootloader fit
>> within the space allotted?  If so, what steps did you take to reduce
>> the size of your bootstrap code?

Not particularly, but combining adjacent mov instructions was helpful.

---- RATIONALE ----

>> A4: Why did you choose your final implementation?  Did you encounter
>> any major obstacles or difficulties that forced you to change your
>> approach?  If so, describe the obstacles and how you overcame them.

I chose to put the struct in memory because I didn't really remember how
to manipulate the stack and it really didn't matter where it was.

I chose to write it without helper functions because the code logic was
simple enough (look at the answer to A2) to write in one function.

There were no major obstacles. Little endianness caused a few oddities 
(this is why line 108 says 1(%bx), for example).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Too easy, too little time.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
