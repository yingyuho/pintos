			+--------------------+
			|       CS 124       |
			| PROJECT 3: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

New:

struct alarm {
    int64_t expires_at;
    struct semaphore expired;
    struct list_elem elem;
};

static struct semaphore alarm_sema_w;
static struct semaphore alarm_sema_r;
static struct list alarm_list;
static struct list_elem *alarm_to_sleep;

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Priority donation is tracked with an integer. ("structure"?)
Nested donation is also tracked with an integer; the cur_pri variable
is simply the largest appliable priority (i.e. of the thread itself
and all threads blocked on locks held by the thread)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

The list of waiting threads in a semaphore is kept sorted by priority,
and when a thread is to be woken for a lock or semaphore it just picks
the one with highest priority. The list of semaphores for condition
variables is kept unsorted, but the list_get_min() function is used to
get the semaphore with the highest priority thread blocked on it.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

A priority donation is caused when the lock is already held by
another thread. If this is the case, then we check whether the thread
holding the lock has lower (effective) priority than the calling thread;
if so, we set that thread's priority to the calling thread's priority.
Nested donation is handled partially by iterating (if the thread holding
the lock is also blocked on a lock, then we should donate to the thread
holding that lock and so on) and partially by donating the effective
priority (this obviates traversing the tree in the other direction).

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

The lock_release code itself doesn't check for a higher priority
thread, but sema_up() calls maybe_yield(), which will yield if a higher
priority thread is now on the ready queue (i.e. if there was a higher
priority thread waiting on the lock).

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

There is just one race condition possible, which is if the thread's
effective priority is modified between checking whether a lock's
priority is larger than effective priority and setting effective
priority to that lock's priority. It is avoided by disabling interrupts
for those two statements.
It could be avoided with a lock on the cur_pri variable, which would
cause more overhead.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The locks and threads form a sort of implicit tree; priority donation is
conceptually handled via tree traversal. However, actual tree traversal
must be done with interrupts disabled to prevent race conditions, so we
really want to do it as little as possible.

The main goal of the design was to minimize the amount of (explicit)
tree traversal while maintaining as little additional state as possible.
I found it necessary to maintain a list of locks held by a thread
(conceptually, the list of children nodes) as well as the current
effective priority (i.e. the maximum priority of all threads in the
subtree). The only place the tree is actually traversed is lock_acquire()
(and even then it traverses upward, so complexity is limited by tree depth)
the rest of the operations can be done using just the additional state.

A useful invariant is that the priority of any thread is the
largest of its base priority and the effective priorities of the first
thread blocked on each lock held by it; this means we never need to
traverse downwards (notice that the effective priorities can't decrease as
long as they're blocked, because we don't provide an interface to change
another thread's priority) because we have all the necessary information about
each subtree.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
